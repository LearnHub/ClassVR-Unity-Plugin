// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: avn/connect/v1/avnfs.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Avn.Connect.V1 {
  public static partial class AvnfsService
  {
    static readonly string __ServiceName = "avn.connect.v1.AvnfsService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Avn.Connect.V1.GetFileUrlRequest> __Marshaller_avn_connect_v1_GetFileUrlRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Avn.Connect.V1.GetFileUrlRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Avn.Connect.V1.GetFileUrlResponse> __Marshaller_avn_connect_v1_GetFileUrlResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Avn.Connect.V1.GetFileUrlResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Avn.Connect.V1.GetManifestRequest> __Marshaller_avn_connect_v1_GetManifestRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Avn.Connect.V1.GetManifestRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Avn.Connect.V1.UploadManifest> __Marshaller_avn_connect_v1_UploadManifest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Avn.Connect.V1.UploadManifest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Avn.Connect.V1.ImportUrlRequest> __Marshaller_avn_connect_v1_ImportUrlRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Avn.Connect.V1.ImportUrlRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Avn.Connect.V1.ImportUrlResponse> __Marshaller_avn_connect_v1_ImportUrlResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Avn.Connect.V1.ImportUrlResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Avn.Connect.V1.GetAltServersRequest> __Marshaller_avn_connect_v1_GetAltServersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Avn.Connect.V1.GetAltServersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Avn.Connect.V1.GetAltServersResponse> __Marshaller_avn_connect_v1_GetAltServersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Avn.Connect.V1.GetAltServersResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Avn.Connect.V1.GetFileUrlRequest, global::Avn.Connect.V1.GetFileUrlResponse> __Method_GetFileUrl = new grpc::Method<global::Avn.Connect.V1.GetFileUrlRequest, global::Avn.Connect.V1.GetFileUrlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFileUrl",
        __Marshaller_avn_connect_v1_GetFileUrlRequest,
        __Marshaller_avn_connect_v1_GetFileUrlResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Avn.Connect.V1.GetManifestRequest, global::Avn.Connect.V1.UploadManifest> __Method_GetPostManifest = new grpc::Method<global::Avn.Connect.V1.GetManifestRequest, global::Avn.Connect.V1.UploadManifest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPostManifest",
        __Marshaller_avn_connect_v1_GetManifestRequest,
        __Marshaller_avn_connect_v1_UploadManifest);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Avn.Connect.V1.ImportUrlRequest, global::Avn.Connect.V1.ImportUrlResponse> __Method_ImportUrl = new grpc::Method<global::Avn.Connect.V1.ImportUrlRequest, global::Avn.Connect.V1.ImportUrlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ImportUrl",
        __Marshaller_avn_connect_v1_ImportUrlRequest,
        __Marshaller_avn_connect_v1_ImportUrlResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Avn.Connect.V1.GetAltServersRequest, global::Avn.Connect.V1.GetAltServersResponse> __Method_GetAltServers = new grpc::Method<global::Avn.Connect.V1.GetAltServersRequest, global::Avn.Connect.V1.GetAltServersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAltServers",
        __Marshaller_avn_connect_v1_GetAltServersRequest,
        __Marshaller_avn_connect_v1_GetAltServersResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Avn.Connect.V1.AvnfsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for AvnfsService</summary>
    public partial class AvnfsServiceClient : grpc::ClientBase<AvnfsServiceClient>
    {
      /// <summary>Creates a new client for AvnfsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AvnfsServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AvnfsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AvnfsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AvnfsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AvnfsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Verify file exists and return URL if it does
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Avn.Connect.V1.GetFileUrlResponse GetFileUrl(global::Avn.Connect.V1.GetFileUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFileUrl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Verify file exists and return URL if it does
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Avn.Connect.V1.GetFileUrlResponse GetFileUrl(global::Avn.Connect.V1.GetFileUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFileUrl, null, options, request);
      }
      /// <summary>
      /// Verify file exists and return URL if it does
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Avn.Connect.V1.GetFileUrlResponse> GetFileUrlAsync(global::Avn.Connect.V1.GetFileUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFileUrlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Verify file exists and return URL if it does
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Avn.Connect.V1.GetFileUrlResponse> GetFileUrlAsync(global::Avn.Connect.V1.GetFileUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFileUrl, null, options, request);
      }
      /// <summary>
      /// DISABLED UNTIL METADATA ISSUES CAN BE RESOLVED S3_PUT_INSECURE
      ///rpc GetPutManifest(GetManifestRequest) returns (UploadManifest);
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Avn.Connect.V1.UploadManifest GetPostManifest(global::Avn.Connect.V1.GetManifestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPostManifest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DISABLED UNTIL METADATA ISSUES CAN BE RESOLVED S3_PUT_INSECURE
      ///rpc GetPutManifest(GetManifestRequest) returns (UploadManifest);
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Avn.Connect.V1.UploadManifest GetPostManifest(global::Avn.Connect.V1.GetManifestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPostManifest, null, options, request);
      }
      /// <summary>
      /// DISABLED UNTIL METADATA ISSUES CAN BE RESOLVED S3_PUT_INSECURE
      ///rpc GetPutManifest(GetManifestRequest) returns (UploadManifest);
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Avn.Connect.V1.UploadManifest> GetPostManifestAsync(global::Avn.Connect.V1.GetManifestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPostManifestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DISABLED UNTIL METADATA ISSUES CAN BE RESOLVED S3_PUT_INSECURE
      ///rpc GetPutManifest(GetManifestRequest) returns (UploadManifest);
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Avn.Connect.V1.UploadManifest> GetPostManifestAsync(global::Avn.Connect.V1.GetManifestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPostManifest, null, options, request);
      }
      /// <summary>
      /// Bring a remote file into AVNFS
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Avn.Connect.V1.ImportUrlResponse ImportUrl(global::Avn.Connect.V1.ImportUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportUrl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Bring a remote file into AVNFS
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Avn.Connect.V1.ImportUrlResponse ImportUrl(global::Avn.Connect.V1.ImportUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ImportUrl, null, options, request);
      }
      /// <summary>
      /// Bring a remote file into AVNFS
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Avn.Connect.V1.ImportUrlResponse> ImportUrlAsync(global::Avn.Connect.V1.ImportUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportUrlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Bring a remote file into AVNFS
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Avn.Connect.V1.ImportUrlResponse> ImportUrlAsync(global::Avn.Connect.V1.ImportUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ImportUrl, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Avn.Connect.V1.GetAltServersResponse GetAltServers(global::Avn.Connect.V1.GetAltServersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAltServers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Avn.Connect.V1.GetAltServersResponse GetAltServers(global::Avn.Connect.V1.GetAltServersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAltServers, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Avn.Connect.V1.GetAltServersResponse> GetAltServersAsync(global::Avn.Connect.V1.GetAltServersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAltServersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Avn.Connect.V1.GetAltServersResponse> GetAltServersAsync(global::Avn.Connect.V1.GetAltServersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAltServers, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override AvnfsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AvnfsServiceClient(configuration);
      }
    }

  }
}
#endregion
